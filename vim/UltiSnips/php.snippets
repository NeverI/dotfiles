snippet thr "Throw a simple exception"
throw new \Exception("${1:Buu}");
endsnippet

snippet thrp "Throw an exception with print_rred data"
throw new \Exception(print_r(\$${1}, true));
endsnippet

snippet thrl "Throw a simple exception"
throw new \LogicException("${1:message}");
endsnippet

snippet cls "Symfony class declaration"
<?php

namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;

class `!v expand("%:t:r")` ${1}
{
	${0}
}
endsnippet

snippet gm "Simple getter"
public function get${1}()
{
	return \$this->${1/.+/\l$0/};
}
endsnippet

snippet sm "Simple setter"
public function set${1}(\$${2:value})
{
	\$this->${1/.+/\l$0/} = \$$2;
	return \$this;
}
endsnippet

snippet tec "Symfony testCase declaration"
<?php
namespace `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+.php$', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`;

use `!v substitute(substitute(substitute(expand("%:p"), '\v(.*\/\U+)(\/\w+\/\w+)\/.+', '\2', ''), '\/', '\\', 'g'), '\\', '', '')`\Testcase;

class `!v expand("%:t:r")` extends TestCase
{
	public \$${1:service};

	public function test()
	{
		parent::test();

		$0
	}

	public function create${1/.+/\u$0/}()
	{
		\$this->$1 = \$this->createLogic('`!v substitute(substitute(expand("%:p"), '\v(.*\/\U+)((\/\w+)+)\/\w+\/\w+.php$', '\2', ''), '\/', '\\', 'g')`\\`!v substitute(expand("%:t:r"), 'Test', '', '')`');
		return \$this;
	}
}
endsnippet

snippet bef "Bdd beforEach block"
beforeEach(function(\$test) {
	\$test
		->${0}
		;
});
endsnippet

snippet desc "Bdd describe block"
describe("${1:message}", function(\$test) {
	${0}
});
endsnippet

snippet it "Bdd it block"
it("${1:message}", function(\$test) {
	${0}
});
endsnippet

snippet exp "Esperence expect"
\$test->expect(${1})->to->be(${0});
endsnippet

snippet exph "Esperence expect have"
\$test->expect(${1})->to->have->length(${0});
endsnippet

snippet expt "Esperence expect throw"
\$test->expect(function() use(\$test) {
	\$test->${1};
})->to->throw(${0});
endsnippet

